---
import { Image } from "astro:assets";
import { imageMetadata } from "astro/assets/utils";
// import Swiper and modules styles
import "swiper/scss";
import "swiper/scss/pagination";
import "swiper/scss/navigation";
import "../styles/my-swiper-styles.scss";
interface Props {
  src?: ImageMetadata;
  alt?: string;
}
// Use import.meta.glob to get all images from the photo directory
const images: { [key: string]: { default: ImageMetadata } } = import.meta.glob(
  "../images/gallery/*.{jpeg,jpg,JPG,png,gif,webp}",
  { eager: true }
);
// Create an array of image information
const imageList = Object.entries(images).map(([path, image]) => {
  // Extract filename from path to use as default title
  const fileName = path.split("/").pop()?.split(".")[0] || "";
  const title = fileName
    .split("-")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(" ");

  return {
    path,
    alt: title,
    src: image.default,
  };
});

const pageTitle = "Gallery";
---

<div class="gallery-container">
  <div class="gallery">
    {
      imageList.map((image) => (
        <figure class="gallery-item">
          <Image src={image.src} alt={image.alt} class="gallery-image" />
        </figure>
      ))
    }
  </div>
</div>
<!-- Swiper Modal -->
<dialog id="modal3" onclick="Event.target === this && this.close()">
  <article>
    <a
      href="#"
      rel="prev"
      class="close"
      onclick="this.closest('dialog').close()"
    >
    </a>
    <section>
      <div class="swiper">
        <div class="swiper-wrapper">
          {
            imageList.map((image, index) => (
              <div class="swiper-slide">
                <Image src={image.src} alt={image.alt} />
              </div>
            ))
          }
        </div>
        <!-- If we need pagination -->
        <!-- If we need pagination -->
        <div class="swiper-pagination"></div>
        <!-- If we need navigation buttons -->
        <div class="swiper-button-prev"></div>
        <div class="swiper-button-next"></div>
      </div>
      <style lang="scss">
        .gallery {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 2rem;
        }

        .gallery-item {
          margin: 0;
          position: relative;
          overflow: hidden;
          border-radius: var(--pico-border-radius);
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
          padding: 0.25em;
          transition: transform 0.3s ease;
        }

        .gallery-item:hover {
          transform: translateY(-5px);
          box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
          cursor: pointer;
        }

        .gallery-image {
          width: 100%;
          height: auto;
          object-fit: contain;
          aspect-ratio: 4/3;
        }
        // .swiper-slide {
        //   display: flex;
        //   justify-content: center;
        //   align-items: center;
        //   & img {
        //     display: block;
        //     width: auto;
        //     height: 72vh;
        //     object-fit: scale-down;
        //     border-radius: 10px;
        //   }
        // }
        .swiper-button-next,
        .swiper-button-prev {
          color: var(--pico-primary);
        }
        .swiper-slide img {
          width: 100%;
          height: 72vh;
          object-fit: contain;
        }
        @media (max-width: 768px) {
          .gallery {
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
          }

          .gallery-container {
            padding: 1rem;
          }
        }
        /* Modal */
        /* prevent scroll when dialog is open */
        body:has(dialog[open]) {
          overflow: hidden;
        }

        dialog:not([open]) {
          display: grid;
          opacity: 0;
          pointer-events: none;
          visibility: hidden;
          transition: all var(--pico-transition) allow-discrete;
        }

        dialog[open] {
          display: grid;
          visibility: visible;
          opacity: 1;
          transition: opacity var(--pico-transition);
        }

        dialog article {
          margin: auto;
          padding: 1em;
          max-width: 90vw;
          max-height: unset;
          overflow: unset;
          transform: scale(0.5);
          transition: transform var(--pico-transition);
        }
        dialog article section {
          margin-bottom: 0;
        }
        dialog[open] article {
          transform: scale(1);
        }
        .close {
          margin-top: calc(var(--pico-spacing) * -0.5);
          width: 2rem;
          height: 2rem;
          background-size: auto 2rem;
        }
      </style>
      <script>
        // core version + navigation, pagination modules:
        import Swiper from "swiper";
        import { Navigation, Pagination } from "swiper/modules";

        // init Swiper:
        const swiper = new Swiper(".swiper", {
          // configure Swiper to use modules
          modules: [Navigation, Pagination],

          // loop: false,
          slidesPerView: 1,
          spaceBetween: 10,
          centeredSlides: true,
          grabCursor: true,
          // effect: "flip",
          // autoplay: {
          //   delay: 3000,
          //   disableOnInteraction: false,
          // },
          // If we need pagination
          pagination: {
            el: ".swiper-pagination",
            type: "bullets",
          },
          // Navigation arrows
          navigation: {
            nextEl: ".swiper-button-next",
            prevEl: ".swiper-button-prev",
          },
        });
        const images = document.querySelectorAll("img.gallery-image");
        const dialog = document.getElementById("modal3");
        (dialog as HTMLDialogElement).inert = true;
        images.forEach(function (imag, index) {
          imag.addEventListener("click", () => {
            (dialog as HTMLDialogElement).showModal();
            (dialog as HTMLDialogElement).inert = false;
            swiper.slideTo(index);
          });
        });
        (dialog as HTMLDialogElement).addEventListener("close", function () {
          swiper.slideTo(1);
        });
      </script>
    </section>
  </article>
</dialog>
